[project]
name = "pydantic-tfl-api"
version = "1.2.2"
description = "A Pydantic-based wrapper for the TfL Unified API https://api-portal.tfl.gov.uk/. Not associated with or endorsed by TfL."
authors = [
    {name = "Rob Aleck", email = "mnbf9rca@users.noreply.github.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
keywords = ["pydantic", "tfl", "tfl-api", "transport-for-london", "unified-api"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "pydantic>=2.8.2,<3.0",
    "requests>=2.32.3,<3.0",
]

[project.urls]
Homepage = "https://github.com/mnbf9rca/pydantic_tfl_api"
Repository = "https://github.com/mnbf9rca/pydantic_tfl_api"
Issues = "https://github.com/mnbf9rca/pydantic_tfl_api/issues"

[tool.uv]
dev-dependencies = [
    "black>=25.9.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "flake8>=7.3.0",
    "Flake8-pyproject>=1.2.3",
    "coverage[toml]>=7.10.0",
    "pre-commit>=4.3.0",
    "bump-my-version>=1.2.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.coverage.run]
omit = [
    "*/test/*",
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/.tox/*",
    "*/.eggs/*",
    "*/.vscode-remote/*",
    "*/build_script/*",
]
relative_files = true

[tool.pytest.ini_options]
addopts = "--cov --cov-branch --cov-report term-missing -vv --strict-markers -rfE"



[tool.flake8]
max-line-length = 120
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    "venv",
    ".venv",
    "build_script",
]

[tool.bumpversion]
current_version = "1.2.2"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'