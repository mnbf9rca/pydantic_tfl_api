name: Sync Release Branch and Bump Version

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      bump_type:
        description: 'Manual version bump override (leave empty for automatic detection)'
        required: false
        type: choice
        options:
          - ''
          - major
          - minor
          - patch
        default: ''

permissions:
  contents: write
  pull-requests: write

jobs:
  sync_release_branch:
    runs-on: ubuntu-latest

    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.PUSH_APP_ID }}
          private-key: ${{ secrets.PUSH_APP_SECRET }}

      - name: Check out repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0  # Full history for proper syncing
          token: ${{ steps.app-token.outputs.token }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if release branch exists
        id: check_branch
        run: |
          if git ls-remote --heads origin release | grep -q release; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "Release branch exists"
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "Release branch does not exist"
          fi

      - name: Create release branch (first time)
        if: steps.check_branch.outputs.branch_exists == 'false'
        run: |
          echo "## üéâ Creating Release Branch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This is the first time the release branch is being created." >> $GITHUB_STEP_SUMMARY
          echo "It will be created from the current main branch with version 2.0.0" >> $GITHUB_STEP_SUMMARY

          git checkout -b release
          git push -u origin release

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Release branch created successfully" >> $GITHUB_STEP_SUMMARY

      - name: Sync and bump version (atomic operation)
        if: steps.check_branch.outputs.branch_exists == 'true'
        id: sync_and_bump
        run: |
          echo "## üîÑ Syncing Release Branch and Bumping Version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Fetch both branches
          git fetch origin release main

          # Checkout release branch
          git checkout release

          # Get commit info
          MAIN_COMMIT=$(git rev-parse origin/main)
          RELEASE_COMMIT=$(git rev-parse release)

          echo "**Current Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- Main branch: \`${MAIN_COMMIT:0:7}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Release branch: \`${RELEASE_COMMIT:0:7}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if release is already up to date
          if git merge-base --is-ancestor origin/main release; then
            echo "‚ö†Ô∏è Release branch is already up to date with main" >> $GITHUB_STEP_SUMMARY
            echo "No sync or version bump needed." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Try to merge main into release
          echo "**Attempting to merge main into release...**" >> $GITHUB_STEP_SUMMARY

          if ! git merge origin/main --no-edit; then
            echo "‚ùå Merge conflicts detected!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Conflicting files:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            git diff --name-only --diff-filter=U >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è Manual intervention required. Please resolve conflicts manually." >> $GITHUB_STEP_SUMMARY
            git merge --abort
            exit 1
          fi

          echo "‚úÖ Merge successful" >> $GITHUB_STEP_SUMMARY

          # Show what was merged
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>üìù Commits merged</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git log --oneline ${RELEASE_COMMIT}..origin/main >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

          # Determine version bump type
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Determining version bump...**" >> $GITHUB_STEP_SUMMARY

          # Use manual override if provided, otherwise auto-detect
          if [ -n "${{ github.event.inputs.bump_type }}" ]; then
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
            echo "Using manual bump type: $BUMP_TYPE" >> $GITHUB_STEP_SUMMARY
          else
            echo "Auto-detecting bump type from dependency changes..." >> $GITHUB_STEP_SUMMARY
            BUMP_TYPE=$(bash scripts/determine-version-bump.sh)
            echo "Detected bump type: $BUMP_TYPE" >> $GITHUB_STEP_SUMMARY
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Bump type:** \`$BUMP_TYPE\`" >> $GITHUB_STEP_SUMMARY

      - name: Bump version and tag
        if: steps.check_branch.outputs.branch_exists == 'true'
        id: bump_version
        uses: anothrNick/github-tag-action@1.70.0
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          WITH_V: false
          DEFAULT_BUMP: ${{ steps.sync_and_bump.outputs.bump_type || 'patch' }}
          RELEASE_BRANCHES: release
          DRY_RUN: false

      - name: Update pyproject.toml with new version
        if: steps.check_branch.outputs.branch_exists == 'true'
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_tag }}"

          echo "**Setting version in pyproject.toml to $NEW_VERSION**" >> $GITHUB_STEP_SUMMARY

          # Update version in pyproject.toml
          sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" pyproject.toml

          # Commit the version change
          git add pyproject.toml
          git commit -m "chore: bump version to $NEW_VERSION"

          # Push the changes
          git push origin release

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚úÖ Release Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**New version:** \`$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Git tag:** \`$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The deployment workflow will now trigger automatically." >> $GITHUB_STEP_SUMMARY
