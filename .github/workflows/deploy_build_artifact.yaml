name: build artifact
on: 
  workflow_call:

jobs:
  build_artefacts:
    runs-on: ubuntu-latest
    permissions:                # Job-level permissions configuration starts here
      contents: read           # 'write' access to repository contents
      actions: read
    steps:

      - name: check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5
        with:
          python-version: 3.12

      - name: install poetry
        uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b # v1
        with:
          version: 1.8.3 # pin the version as they keep changing their APIs
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          poetry install --with dev --no-interaction --sync
          python  -c "import os; print(os.environ['VIRTUAL_ENV'])"

      - name: Build
        id: Build
        run: |
          version=$(poetry version | awk '{print $2}')
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "ARTEFACT-NAME=dist-$version" >> "$GITHUB_OUTPUT
          poetry build

      - name: Upload build artifact
        id: upload-artifact
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4
        with:
          compression-level: 0 # no compression
          if-no-files-found: error
          name: ${{ steps.Build.outputs.ARTEFACT-NAME }}
          path: dist/

    outputs:
      artifact-url: ${{ steps.upload-artifact.outputs.artifact-url }}
      artifact-id: ${{ steps.upload-artifact.outputs.artifact-id }}
      package-version: ${{ steps.Build.outputs.VERSION }}
      artifact-name: ${{ steps.Build.outputs.ARTEFACT-NAME }}
