name: Python package

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main

jobs:
  codeql:
    name: "CodeQL"
    runs-on: ubuntu-latest
    permissions:
          actions: read
          contents: read
          security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["python"]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@b611370bb5703a7efb587f9d136a52ea24c5c38c # v3
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@b611370bb5703a7efb587f9d136a52ea24c5c38c # v3

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo "Run, Build Application using script"
      #   ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@b611370bb5703a7efb587f9d136a52ea24c5c38c # v3
        with:
          category: "/language:${{matrix.language}}"

  test:
    strategy:
      matrix:
        python-version: ["3.12"]
    runs-on: ubuntu-latest
    container: ubuntu:latest@sha256:2e863c44b718727c860746568e1d54afd13b2fa71b160f5cd9058fc436217b30
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install OS dependencies for snok/install-poetry
        run: |
          DEBIAN_FRONTEND=noninteractive apt update
          DEBIAN_FRONTEND=noninteractive apt install curl sqlite3 -y
      - uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b # v1
        with:
          version: 1.8.3 # pin the version as they keep changing their APIs
          virtualenvs-create: false
          virtualenvs-in-project: false
      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          poetry install --with dev --no-interaction --sync
          python  -c "import os; print(os.environ['VIRTUAL_ENV'])"
      - name: Lint with flake8
        run: |
          . venv/bin/activate
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          . venv/bin/activate
          pytest --cov pydantic_tfl_api --cov-report=xml
      # - name: Upload coverage reports to Codecov
      #   uses: codecov/codecov-action@0cfda1dd0a4ad9efc75517f399d859cd1ea4ced1 # v4
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}          